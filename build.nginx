#!/bin/bash

set -e


# Instalando requerimientos
apt-get install -y build-essential \
	zlib1g-dev \
	libpcre3 \
	libpcre3-dev \
	unzip \
	uuid-dev \
	apt-utils \
	autoconf \
	automake \
	git \
	libcurl4-openssl-dev \
	libgeoip-dev \
	liblmdb-dev \
	libpcre++-dev \
	libtool \
	libxml2-dev \
	libyajl-dev \
	pkgconf \
	wget \
	zlib1g-dev

APPDIR=$(pwd)
PREFIX="/opt"
SRC=${PREFIX}"/sources"
NUM_CPU=$(cat /proc/cpuinfo | grep processor | wc -l)
ULIMIT=$(ulimit -n)
TMPFSPATH="/opt/cache"
# Read configuration variable file if it is present and override defaults
#[ -r ./CONFIG ] && . ./CONFIG

logfile=${APPDIR}/build.log
#exec > $logfile 2>&1
exec > $logfile 

mkdir -p ${SRC}
#echo "Cleaning $SRC_DIR"
#rm -rf ${SRC}/nginx*

# Determine the latest stable version's download URL, assumed to be
# the first `/download/nginx-*.tar.gz`-like link following the header
# "Stable version".
latestVer=$(curl -s 'http://nginx.org/en/download.html' |
   sed 's/</\'$'\n''</g' | sed -n '/>Stable version$/,$ p' |
   egrep -m1 -o '/download/nginx-.+\.tar\.gz')

NGINX_VERSION=$(echo $latestVer | sed -n 's|.*nginx-\(.*\).tar.gz.*|\1|p' | awk '{ print $1; exit }')

echo "Downloading Libraries"
# _get_pack <github user> <repositorio> <prefijo> <custom_name>
# prefijo: default "v"
# <custom_name>: default <repositorio>
function _get_pack() {
   if [ -z "$3" ]; then
     prefix="v"
   else
     prefix=$3
   fi
   if [ -z "$4" ]; then
     custom=$2
   else
     custom=$4
   fi
   VER=$(wget -qO- --no-check-certificate https://github.com/$1/$2/releases | sed -n "s|.*/archive/${prefix}\(.*\).tar.gz.*|\1|p" | awk '{ print $1; exit}')
   if [ -z "${VER}" ]; then
     echo "Fallo al determinar la version"
     exit 5
   fi
   #echo "Getting latest $1/$2 version ${custom}-${VER}"
   echo $(echo ${VER}|sed "s/(.*)\-\(stable\|beta\)/\1/")

   if [ ! -f ${SRC}/${custom}-${VER}.tar.gz ]; then
     curl -s -L https://github.com/$1/$2/archive/${prefix}${VER}.tar.gz > ${SRC}/${custom}-${VER}.tar.gz
   fi
}

function _check_clean() {
   if [ ! -z "${1}" ]; then
	   [ -d ${SRC}/$1 ] && rm -rf ${SRC}/$1
	   echo "Wiping old clientes"
   fi
   echo "Done"
} 

function _create_tmpfs() {
   echo "Creating tmpfs for fastcgi_cache"
}

PAGESPEED_VERSION=$(_get_pack apache incubator-pagespeed-ngx latest- pagespeed)
ZLIB_VERSION=$(_get_pack madler zlib)
OPENSSL_VERSION=$(_get_pack openssl openssl OpenSSL_1_0)
ln -s ${SRC}/openssl-${OPENSSL_VERSION}.tar.gz ${SRC}/openssl-1_0${OPENSSL_VERSION}.tar.gz
OPENSSL_VERSION="1_0$OPENSSL_VERSION"

## Download latest zlib Library
#ZLIB_VERSION=`wget -qO- --no-check-certificate https://github.com/madler/zlib/releases | sed -n 's|.*/archive/v\(.*\).tar.gz.*|\1|p' | awk '{ print $1; exit }'`
#if [ ! -f ${SRC}/zlib-${ZLIB_VERSION}.tar.gz ];
#then
#  echo "Getting latest zlib Library version: $ZLIB_VERSION"
#  curl -s -L https://github.com/madler/zlib/archive/v${ZLIB_VERSION}.tar.gz > ${SRC}/zlib-${ZLIB_VERSION}.tar.gz
#fi
## Download the latest OpenSSL Libraries
#OPENSSL_VERSION=`wget -qO- --no-check-certificate https://github.com/openssl/openssl/releases | sed -n 's|.*/archive/OpenSSL_\(1_0.*\).tar.gz.*|\1|p' | awk '{ print $1; exit }'`
#if [ ! -f ${SRC}/openssl-${OPENSSL_VERSION}.tar.gz ]; 
#then
#  echo "Getting latest OpenSSL Libraries: $OPENSSL_VERSION"
#  curl -s -L  https://github.com/openssl/openssl/archive/OpenSSL_${OPENSSL_VERSION}.tar.gz > ${SRC}/openssl-${OPENSSL_VERSION}.tar.gz
#fi
## Download the latest PCRE Library
PCRE_VERSION=`wget -qO- --no-check-certificate https://ftp.pcre.org/pub/pcre/ | sed -n 's|.*pcre-\(8.*\).tar.gz.*|\1|p' | tail -1 | awk '{ print $1; exit }'`
if [ ! -f ${SRC}/pcre-$PCRE_VERSION.tar.gz ];
then
  echo "Getting latest PCRE Library: $PCRE_VERSION"
  curl -s -L  https://ftp.pcre.org/pub/pcre/pcre-$PCRE_VERSION.tar.gz > ${SRC}/pcre-$PCRE_VERSION.tar.gz
fi

# Download.
if [ ! -f ${SRC}/nginx-${NGINX_VERSION}.tar.gz ];
then
  echo "Getting latest Nginx Core version: $NGINX_VERSION"
  curl -s "http://nginx.org${latestVer}" > ${SRC}/nginx-${NGINX_VERSION}.tar.gz
fi

echo "Downloading external modules"

## Download the clone of ngx_http_enhanced_memcached_module
#[ -d ${SRC}/memcached_module ] && rm -rf ${SRC}/memcached_module
_check_clean "memcached_module"
git -q clone git://github.com/bpaquet/ngx_http_enhanced_memcached_module.git ${SRC}/memcached_module
_check_clean "naxsi"
git -q clone https://github.com/nbs-system/naxsi.git ${SRC}/naxsi
# ModSecurity v3
echo "Compilando ModSecurity 3.0"
_check_clean "modsecurity"
git -q clone --depth 1 -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity ${SRC}/modsecurity
cd ${SRC}/modsecurity
git submodule init 
git submodule update
./build.sh
./configure --prefix=${PREFIX}/modsecurity
make -s && make install
_check_clean "modsecurity-nginx"
git -q clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx.git ${SRC}/modsecurity-nginx
# END ModSec 


echo "Uncompressing modules"
cd ${SRC}
mkdir -p pagespeed-${PAGESPEED_VERSION} && tar -zxf pagespeed-${PAGESPEED_VERSION}.tar.gz -C pagespeed-${PAGESPEED_VERSION} --strip-components=1
cd pagespeed-${PAGESPEED_VERSION}
[ ! -f 1.13.35.2-x64.tar.gz ] && wget -q https://dl.google.com/dl/page-speed/psol/1.13.35.2-x64.tar.gz
tar -zxf 1.13.35.2-x64.tar.gz
cd ${SRC}
tar -zxf zlib-${ZLIB_VERSION}.tar.gz 
tar -zxf pcre-${PCRE_VERSION}.tar.gz
mkdir -p openssl-${OPENSSL_VERSION} && tar -zxf openssl-${OPENSSL_VERSION}.tar.gz -C openssl-${OPENSSL_VERSION} --strip-components=1
echo "Uncompressing Nginx Core"
_check_clean "nginx-${NGINX_VERSION}"
tar -zxf nginx-${NGINX_VERSION}.tar.gz
echo "Compiling Nginx"
cd ${SRC}
cd nginx-${NGINX_VERSION}
export MODSECURITY_INC="/opt/modsecurity/include/"
export MODSECURITY_LIB="/opt/modsecurity/lib"
# Modifing Headers
sed -i "s/Server\: nginx/Server\: Synaptic/g" src/http/ngx_http_header_filter_module.c
./configure \
	--prefix=${PREFIX}/nginx \
	--with-openssl=../openssl-${OPENSSL_VERSION} \
	--with-http_ssl_module \
	--without-mail_pop3_module \
	--without-mail_imap_module \
	--without-mail_smtp_module \
	--with-pcre=${SRC}/pcre-$PCRE_VERSION \
	--with-zlib=${SRC}/zlib-${ZLIB_VERSION} \
	--with-stream \
	--modules-path=${PREFIX}/nginx/modules \
	--with-compat \
	--add-dynamic-module=${SRC}/memcached_module \
	--add-dynamic-module=${SRC}/modsecurity-nginx \
	--add-dynamic-module=${SRC}/naxsi/naxsi_src \
	--add-dynamic-module=${SRC}/pagespeed-${PAGESPEED_VERSION}
make -s && make -s modules && make -s install
# Configuring ModSec
mkdir -p ${PREFIX}/nginx/modsec
wget -q https://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/modsecurity.conf-recommended -O ${PREFIX}/nginx/modsec/modsecurity.conf
set -x
sed -i 's/SecRuleEngine DetectionOnly/SecRuleEngine On/' ${PREFIX}/nginx/modsec/modsecurity.conf
echo "Configuring nginx"
mkdir -p ${PREFIX}/letsencrypt
mkdir -p ${PREFIX}/nginx/{conf,log,run}
mkdir -p ${PREFIX}/nginx/conf/{custom}
mkdir -p ${PREFIX}/nginx/{sites-enables,sites-available}
cp ${APPDIR}/nginx.conf.tpl ${PREFIX}/nginx/nginx.conf
cp ${APPDIR}/mime.types.tpl ${PREFIX}/nginx/conf/mime.types
cp ${APPDIR}/certbot.conf.tpl ${PREFIX}/nginx/conf/certbot.conf
cp ${APPDIR}/ssl.conf.tpl ${PREFIX}/nginx/conf/ssl.conf
cp ${APPDIR}/proxy_headers.conf.tpl ${PREFIX}/nginx/conf/proxy_headers.conf
cp ${APPDIR}/fastcgi_cache.conf.tpl ${PREFIX}/nginx/conf/fastcgi_cache.conf
cp ${APPDIR}/site.conf.tpl ${PREFIX}/nginx/sites-available/site.conf
cp ${APPDIR}/site-cache.conf.tpl ${PREFIX}/nginx/conf/site-cache.conf
cp ${APPDIR}/site-locations.conf.tpl ${PREFIX}/nginx/conf/site-locations.conf
# CAche dir for FastCGI
[ -d /dev/shm ] && TMPFSPATH="\/dev\/shm"
[ ! -d ${TMPFSPATH} ] && _create_tmpfs
sed -i "s/TMPFSPATH/${TMPFSPATH}/g" ${PREFIX}/nginx/conf/fastcgi_cache.conf


exit
echo "Generando archivos de configuraciÃ³n"
mkdir -p ${RUN_DIR}
mkdir -p /opt/{ssl,www}
mkdir -p ${PREFIX}/{conf.d,sites-enabled,sites-available,snippets}
cat > ${PREFIX}/conf/nginx.conf << EOF
user www-data;
worker_processes ${NUM_CPU};
pid ${RUN_DIR}/nginx.pid;

events {
  worker_connections ${ULIMIT};
  multi_accept on;
  use epoll;
}

http {
  keepalive_timeout 15;
  client_body_timeout 12;
  client_header_timeout 12;
  send_timeout 10;
  server_tokens off;

  sendfile         off; #https://wiki.alpinelinux.org/wiki/Nginx_as_reverse_proxy_with_acme_(letsencrypt)
  tcp_nopush       on;
  tcp_nodelay      on;

  client_body_buffer_size    128k;
  client_max_body_size       10m;
  client_header_buffer_size    1k;
  large_client_header_buffers  4 4k;

  include ${PREFIX}/conf/mime.types;
  default_type application/octet-stream;
  # buffering causes issues
  proxy_buffering off; #https://wiki.alpinelinux.org/wiki/Nginx_as_reverse_proxy_with_acme_(letsencrypt)

  # Headers adicionales
  add_header X-Frame-Options DENY;
  add_header X-Content-Type-Options nosniff;
  add_header X-XSS-Protection "1; mode=block";
  add_header X-Provider "Synaptic MX";
  # Unicamente por sitio
  #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
  include ${PREFIX}/snippets/ssl.conf;
  include ${PREFIX}/conf.d/*.conf;
  include ${PREFIX}/sites-enabled/*;
}
EOF
echo "Generating default SSL files"
openssl dhparam -out /opt/ssl/dhparam.pem 4096
cat >${PREFIX}/snippets/ssl.conf << EOF
ssl_prefer_server_ciphers on;
ssl_ecdh_curve secp384r1;
ssl_session_cache shared:SSL:10m;
ssl_session_tickets off;
ssl_stapling on;
ssl_stapling_verify on;
resolver 8.8.8.8 8.8.4.4 valid=300s;
resolver_timeout 3s;
ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_dhparam /opt/ssl/dhparam.pem;
EOF

cat >${PREFIX}/snippets/proxy_headers.conf << EOF
proxy_set_header    X-Forwarded-By       \$server_addr:\$server_port;
proxy_set_header    X-Forwarded-For      \$remote_addr;
proxy_set_header    X-Forwarded-Proto    \$scheme;
proxy_set_header    Host                 \$host;
EOF

cat >${PREFIX}/snippets/php-fpm.conf << EOF
try_files \$uri /index.php =404;
fastcgi_split_path_info ^(.+\.php)(/.+)$;
#Per Site
#fastcgi_pass unix:/var/run/php/php5.6-fpm.sock;
fastcgi_index index.php;
fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
include fastcgi_params;
EOF
cat >${PREFIX}/snippets/errors_pages.conf <<EOF
    error_page 500 502 503 504 /500.html;
    location = /500.html {
        root ${PREFIX}/html/;
    }
    location = /403.html {
        root ${PREFIX}/html/;
    }
EOF
echo "Printing PHP Socks"
cat /proc/net/unix | grep php | awk '{print $8}'
echo "Default Site"
cat >${PREFIX}/sites-available/default << EOF
server {
  # listen IP:PORT <ssl>;
  #listen 443 ssl;
  listen 80;
  server_name _;
  
  access_log ${PREFIX}/log/access.log;
  error_log ${PREFIX}/log/error.log;

  root /opt/www;
  index index.html index.php;

  location / {
    include ${PREFIX}/snippets/proxy_headers.conf;
    proxy_pass http://172.30.20.3:80;
  }
}
EOF

mkdir -p /opt/www
cp ${PREFIX}/html/index.html /opt/www/
